#!/bin/bash

# Specify the host project ID
HOST_PROJECT_ID="your-host-project-id"

# Specify the regions where your subnets might be located
REGIONS=("region-1" "region-2")

# Read subnet names from the text file
SUBNETS_FILE="subnets.txt"

# Output file
OUTPUT_FILE="output.txt"

# Clear the output file before writing
> "$OUTPUT_FILE"

# Function to check which service projects are allowed to use a given subnet
get_subnet_usage() {
    local subnet_name=$1
    local region=$2

    # Get the full subnet URI
    subnet_uri=$(gcloud compute networks subnets describe "$subnet_name" \
        --project="$HOST_PROJECT_ID" --region="$region" \
        --format="get(selfLink)")

    if [[ -z "$subnet_uri" ]]; then
        echo "Error: Subnet $subnet_name not found in region $region." >> "$OUTPUT_FILE"
        return
    fi

    echo "Checking subnet: $subnet_name in region: $region" >> "$OUTPUT_FILE"

    # Find all projects that have access to this subnet
    gcloud organizations policies list --filter="constraints/compute.restrictSharedVpcSubnetworks" --format="json" | \
    jq -r ".[] | select(.name | contains(\"$HOST_PROJECT_ID\")) | .spec.rules[].values.allowed[]" | \
    grep "$subnet_uri" | while read -r policy; do
        # Extract the project ID from the policy
        project_id=$(echo "$policy" | cut -d/ -f6)
        echo "  - Subnet used by service project: $project_id" >> "$OUTPUT_FILE"
    done
}

# Loop through each subnet and find associated service projects
while IFS= read -r subnet; do
    for region in "${REGIONS[@]}"; do
        echo "---------------------------------" >> "$OUTPUT_FILE"
        echo "Subnet: $subnet" >> "$OUTPUT_FILE"
        get_subnet_usage "$subnet" "$region"
    done
done < "$SUBNETS_FILE"

echo "Results have been saved to $OUTPUT_FILE"
