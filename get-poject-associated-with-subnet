#!/bin/bash

# Specify the host project ID
HOST_PROJECT_ID="your-host-project-id"

# Specify the regions where your subnets might be located
REGIONS=("region-1" "region-2")

# Read subnet names from the text file
SUBNETS_FILE="subnets.txt"

# Output file
OUTPUT_FILE="output.txt"

# Clear the output file before writing
> "$OUTPUT_FILE"

echo "Starting to check subnets in host project $HOST_PROJECT_ID" >> "$OUTPUT_FILE"

# Function to get service projects for a given subnet
get_service_projects_for_subnet() {
    local subnet_name=$1

    echo "Checking subnet: $subnet_name" >> "$OUTPUT_FILE"

    # List all associated service projects for the Shared VPC
    service_projects=$(gcloud compute shared-vpc associated-projects list $HOST_PROJECT_ID --format="value(projectId)")
    
    if [[ -z "$service_projects" ]]; then
        echo "No associated service projects found for host project $HOST_PROJECT_ID." >> "$OUTPUT_FILE"
        return
    fi

    for project_id in $service_projects; do
        echo "Checking service project: $project_id" >> "$OUTPUT_FILE"
        for region in "${REGIONS[@]}"; do
            echo "Checking region: $region" >> "$OUTPUT_FILE"
            # Check if the subnet exists in the current service project across both regions
            subnet_exists=$(gcloud compute networks subnets list --project="$project_id" --filter="name=$subnet_name AND region=$region" --format="value(name)")
            if [[ "$subnet_exists" == "$subnet_name" ]]; then
                echo "  - Used by service project: $project_id (Region: $region)" >> "$OUTPUT_FILE"
            fi
        done
    done
}

# Loop through each subnet and find associated service projects
while IFS= read -r subnet; do
    echo "---------------------------------" >> "$OUTPUT_FILE"
    echo "Subnet: $subnet" >> "$OUTPUT_FILE"
    get_service_projects_for_subnet "$subnet"
done < "$SUBNETS_FILE"

echo "Results have been saved to $OUTPUT_FILE"
