#!/bin/bash

# Specify the host project ID
HOST_PROJECT_ID="your-host-project-id"

# Specify the region where your subnets might be located
REGION="region-1"

# Read subnet names from the text file
SUBNETS_FILE="subnets.txt"

# Output file
OUTPUT_FILE="output.txt"

# Clear the output file before writing
> "$OUTPUT_FILE"

echo "Starting to check subnets for host project $HOST_PROJECT_ID in region $REGION" >> "$OUTPUT_FILE"

# Function to query logs and find associated service projects
query_logs_for_subnet() {
    local subnet_name=$1

    # Define the query to extract logs related to the subnet
    query="resource.type=\"gce_subnetwork\" AND resource.labels.subnetwork=\"projects/$HOST_PROJECT_ID/regions/$REGION/subnetworks/$subnet_name\""

    # Run the query in Logs Explorer
    results=$(gcloud logging read "$query" --format="json" --limit=100)

    if [[ -z "$results" ]]; then
        echo "Error: No logs found for subnet $subnet_name in region $REGION for project $HOST_PROJECT_ID." >> "$OUTPUT_FILE"
        return
    fi

    echo "Checking subnet: $subnet_name in region: $REGION" >> "$OUTPUT_FILE"

    # Inspect the results to find the correct path to project ID
    echo "$results" | jq '.[0]' # Check the first log entry to understand its structure

    # Extract project IDs from the logs
    echo "$results" | jq -r '
        .[] |
        (
            .resource.labels.project_id // 
            .jsonPayload.projectId // 
            .protoPayload.authenticationInfo.principalEmail // 
            .protoPayload.requestMetadata.callerIp
        )' | sort -u | while read -r project_id; do
        if [[ -n "$project_id" && "$project_id" != "null" ]]; then
            echo "  - Subnet is used by service project: $project_id" >> "$OUTPUT_FILE"
        else
            echo "  - No associated service project found for this log entry." >> "$OUTPUT_FILE"
        fi
    done
}

# Loop through each subnet and find associated service projects
while IFS= read -r subnet; do
    echo "---------------------------------" >> "$OUTPUT_FILE"
    echo "Subnet: $subnet" >> "$OUTPUT_FILE"
    query_logs_for_subnet "$subnet"
done < "$SUBNETS_FILE"

echo "Results have been saved to $OUTPUT_FILE"

















#!/bin/bash

# Specify the host project ID
HOST_PROJECT_ID="your-host-project-id"

# Specify the subnet name you want to check
SUBNET_NAME="your-subnet-name"

# Output file
OUTPUT_FILE="output.txt"

# Clear the output file before writing
> "$OUTPUT_FILE"

echo "Starting to check service projects using subnet $SUBNET_NAME" >> "$OUTPUT_FILE"

# Get the list of service projects associated with the Shared VPC
SERVICE_PROJECTS=$(gcloud compute shared-vpc associated-projects list --project="$HOST_PROJECT_ID" --format="value(project)")

# Function to check if the subnet is used in a service project
check_subnet_usage() {
    local project_id=$1

    # List subnets in the service project and check if the subnet is listed
    local subnets=$(gcloud compute networks subnets list --project="$project_id" --format="value(name)")

    if echo "$subnets" | grep -q "$SUBNET_NAME"; then
        echo "  - Subnet $SUBNET_NAME is used by service project: $project_id" >> "$OUTPUT_FILE"
    fi
}

# Loop through each service project and check for the subnet
for project in $SERVICE_PROJECTS; do
    echo "Checking service project: $project" >> "$OUTPUT_FILE"
    check_subnet_usage "$project"
done

echo "Results have been saved to $OUTPUT_FILE"







#!/bin/bash

# Specify the host project ID
HOST_PROJECT_ID="your-host-project-id"

# Specify the subnet name you want to check
SUBNET_NAME="your-subnet-name"

# Output file
OUTPUT_FILE="output.txt"

# Clear the output file before writing
> "$OUTPUT_FILE"

echo "Starting to check service projects using subnet $SUBNET_NAME" >> "$OUTPUT_FILE"

# Get the list of service projects associated with the Shared VPC
SERVICE_PROJECTS=$(gcloud compute shared-vpc associated-projects list --project="$HOST_PROJECT_ID" --format="value(project)")

# Debug: Print the list of service projects
echo "Service Projects: $SERVICE_PROJECTS" >> "$OUTPUT_FILE"

# Function to check if the subnet is used in a service project
check_subnet_usage() {
    local project_id=$1

    # List subnets in the service project
    local subnets=$(gcloud compute networks subnets list --project="$project_id" --format="value(name)")

    # Debug: Print the list of subnets in the project
    echo "Subnets in project $project_id: $subnets" >> "$OUTPUT_FILE"

    if echo "$subnets" | grep -q "$SUBNET_NAME"; then
        echo "  - Subnet $SUBNET_NAME is used by service project: $project_id" >> "$OUTPUT_FILE"
    else
        echo "  - Subnet $SUBNET_NAME is NOT used by service project: $project_id" >> "$OUTPUT_FILE"
    fi
}

# Check if SERVICE_PROJECTS is empty
if [ -z "$SERVICE_PROJECTS" ]; then
    echo "No service projects found for host project $HOST_PROJECT_ID." >> "$OUTPUT_FILE"
    exit 1
fi

# Loop through each service project and check for the subnet
for project in $SERVICE_PROJECTS; do
    echo "Checking service project: $project" >> "$OUTPUT_FILE"
    check_subnet_usage "$project"
done

echo "Results have been saved to $OUTPUT_FILE"






#!/bin/bash

# Specify the host project ID
HOST_PROJECT_ID="pkd-prk"

# Specify the subnet name you want to check
SUBNET_NAME="jujrjtdl-sn"

# Specify the full subnetwork URL
SUBNET_URL="projects/$HOST_PROJECT_ID/regions/us-central1/subnetworks/$SUBNET_NAME"

# Output file
OUTPUT_FILE="output.txt"

# Clear the output file before writing
> "$OUTPUT_FILE"

echo "Starting to check service projects using subnet $SUBNET_NAME" >> "$OUTPUT_FILE"

# Get all projects where you have permission to view the policy
PROJECTS=$(gcloud projects list --format="value(projectId)")

# Loop through each project to check its policy
for PROJECT_ID in $PROJECTS; do
    echo "Checking project: $PROJECT_ID" >> "$OUTPUT_FILE"

    # Get the project-level policy for the constraint "constraints/compute.restrictSharedVpcSubnetworks"
    PROJECT_POLICY=$(gcloud projects get-iam-policy "$PROJECT_ID" --filter="bindings.role=roles/compute.xpnResourceAdmin" --flatten="bindings[].members" --format="json" --quiet)

    # Check if we successfully retrieved the policy
    if [ -z "$PROJECT_POLICY" ]; then
        echo "  - No policy found or access denied for project: $PROJECT_ID" >> "$OUTPUT_FILE"
        continue
    fi

    # Debug: Print project policy to verify structure
    echo "Project Policy: $PROJECT_POLICY" >> "$OUTPUT_FILE"

    # Extract allowed subnetwork URLs and match with the subnet
    echo "$PROJECT_POLICY" | jq -r '.[] | select(.role == "roles/compute.xpnResourceAdmin") | .members[]' | grep "$SUBNET_URL" && {
        echo "  - Subnet $SUBNET_NAME is allowed for service project: $PROJECT_ID" >> "$OUTPUT_FILE"
    }
done

if ! grep -q "allowed for service project" "$OUTPUT_FILE"; then
    echo "No service projects found using subnet $SUBNET_NAME." >> "$OU
























#!/bin/bash

# Set your project ID
HOST_PROJECT_ID="your-host-project-id"

# List of subnet IDs to check
SUBNET_IDS=(
  "subnet-id-1"
  "subnet-id-2"
  # Add all your subnet IDs here
)

# Function to get service projects using a subnet
get_service_projects_for_subnet() {
  local subnet_id=$1

  # Create a filter to find logs related to the subnet within the last 30 days
  filter="resource.type=\"gce_instance\" AND logName=\"projects/${HOST_PROJECT_ID}/logs/compute.googleapis.com%2Fvpc_flows\" AND jsonPayload.connection.src_subnetwork_id=\"${subnet_id}\" AND timestamp >= \"$(date -u -d '30 days ago' '+%Y-%m-%dT%H:%M:%SZ')\""

  # Use gcloud logging read to get the project IDs
  project_ids=$(gcloud logging read "$filter" \
    --project="$HOST_PROJECT_ID" \
    --format="json" \
    --limit=1000 | \
    jq -r '.[].resource.labels.project_id' | sort | uniq)

  # Print the results
  if [ -z "$project_ids" ]; then
    echo "No service projects found using subnet ID $subnet_id."
  else
    echo "Subnet ID $subnet_id is used by projects:"
    for project_id in $project_ids; do
      echo "- $project_id"
    done
  fi
}

# Loop through each subnet and get the service projects
for subnet_id in "${SUBNET_IDS[@]}"; do
  get_service_projects_for_subnet "$subnet_id"
  echo "-----------------------------------------"
done


