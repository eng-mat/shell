# This is the enhanced creation workflow with conditional logic for different reservation modes.
name: 'Infoblox: Create CIDR Reservation (Enhanced)'

on:
  workflow_dispatch:
    inputs:
      reservation_mode:
        description: 'Select the type of reservation to make.'
        required: true
        type: choice
        options:
          - 'General'
          - 'Region-Specific'
      
      # --- General Reservation Inputs ---
      general_network_view:
        description: '(General Mode) Select the Network View.'
        required: false # Not required if other mode is chosen
        type: choice
        options:
          - 'network_view_route1'
          - 'network_view_route2'
          - 'network_view_nonroute1'
          - 'network_view_nonroute2'
          - 'network_view_spec_nonroute_n'
          - 'network_view_spec_nonroute_p'

      # --- Region-Specific Reservation Inputs ---
      region:
        description: '(Region-Specific Mode) Select the region.'
        required: false
        type: choice
        options:
          - 'central'
          - 'east'
      environment:
        description: '(Region-Specific Mode) Select the environment.'
        required: false
        type: choice
        options:
          - 'n' # Non-Prod
          - 'p' # Prod
      purpose:
        description: '(Region-Specific Mode) Select the purpose.'
        required: false
        type: choice
        options:
          - 'tr'  # Transit
          - 'ps'  # PSC

      # --- Common Inputs ---
      subnet_name:
        description: 'Subnet Name (will be used as comment in Infoblox)'
        required: true
        type: string
      cidr_block_size:
        description: 'CIDR Block Size for the new reservation (e.g., 28)'
        required: true
        type: number
        default: 28

jobs:
  dry-run:
    name: 'Plan: Find next available CIDR'
    runs-on: ubuntu-latest
    environment: infoblox-prod
    outputs:
      proposed_subnet: ${{ steps.infoblox_dry_run_step.outputs.proposed_subnet }}
      supernet_used: ${{ steps.infoblox_dry_run_step.outputs.supernet_used }}
      network_view: ${{ steps.infoblox_dry_run_step.outputs.network_view }} # Added network_view output
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Get and Mask Infoblox Credentials
        run: |
          set -e
          SECRET_USERNAME_NAME="${{ secrets.INFOBLOX_SECRET_USERNAME }}"
          SECRET_PASSWORD_NAME="${{ secrets.INFOBLOX_SECRET_PASSWORD }}"
          GCLOUD_PROJECT="YOUR_GCP_PROJECT_ID" # IMPORTANT: Replace

          INFOBLOX_USERNAME_VAL=$(gcloud secrets versions access latest --secret="${SECRET_USERNAME_NAME}" --project="${GCLOUD_PROJECT}")
          INFOBLOX_PASSWORD_VAL=$(gcloud secrets versions access latest --secret="${SECRET_PASSWORD_NAME}" --project="${GCLOUD_PROJECT}")
          
          echo "::add-mask::$INFOBLOX_USERNAME_VAL"
          echo "::add-mask::$INFOBLOX_PASSWORD_VAL"
          echo "INFOBLOX_USERNAME=$INFOBLOX_USERNAME_VAL" >> $GITHUB_ENV
          echo "INFOBLOX_PASSWORD=$INFOBLOX_PASSWORD_VAL" >> $GITHUB_ENV
        
      - name: Install Python dependencies
        run: pip install requests

      - name: Run Infoblox Dry Run Script
        id: infoblox_dry_run_step
        run: |
          # The script is now called with all possible inputs
          python infoblox_create_cidr_enhanced.py dry-run \
            --infoblox-url "${{ secrets.INFOBLOX_URL }}" \
            --reservation-mode "${{ github.event.inputs.reservation_mode }}" \
            --general-network-view "${{ github.event.inputs.general_network_view }}" \
            --region "${{ github.event.inputs.region }}" \
            --environment "${{ github.event.inputs.environment }}" \
            --purpose "${{ github.event.inputs.purpose }}" \
            --subnet-name "${{ github.event.inputs.subnet_name }}" \
            --cidr-block-size ${{ github.event.inputs.cidr_block_size }} \
            --site-code "GCP"
        env:
          INFOBLOX_USERNAME: ${{ env.INFOBLOX_USERNAME }}
          INFOBLOX_PASSWORD: ${{ env.INFOBLOX_PASSWORD }}
          # Pass the supernet mappings from a GitHub Variable into the script's environment
          SUPERNET_MAPPINGS_JSON: ${{ vars.SUPERNET_MAPPINGS_JSON }}

  apply:
    name: 'Apply: Reserve the CIDR in Infoblox'
    runs-on: ubuntu-latest
    needs: dry-run
    environment: infoblox-prod
    if: success() && needs.dry-run.outputs.proposed_subnet != ''
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Get and Mask Infoblox Credentials
        run: |
          set -e
          SECRET_USERNAME_NAME="${{ secrets.INFOBLOX_SECRET_USERNAME }}"
          SECRET_PASSWORD_NAME="${{ secrets.INFOBLOX_SECRET_PASSWORD }}"
          GCLOUD_PROJECT="YOUR_GCP_PROJECT_ID" # IMPORTANT: Replace

          INFOBLOX_USERNAME_VAL=$(gcloud secrets versions access latest --secret="${SECRET_USERNAME_NAME}" --project="${GCLOUD_PROJECT}")
          INFOBLOX_PASSWORD_VAL=$(gcloud secrets versions access latest --secret="${SECRET_PASSWORD_NAME}" --project="${GCLOUD_PROJECT}")
          
          echo "::add-mask::$INFOBLOX_USERNAME_VAL"
          echo "::add-mask::$INFOBLOX_PASSWORD_VAL"
          echo "INFOBLOX_USERNAME=$INFOBLOX_USERNAME_VAL" >> $GITHUB_ENV
          echo "INFOBLOX_PASSWORD=$INFOBLOX_PASSWORD_VAL" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: pip install requests

      - name: Run Infoblox Apply Script
        id: apply_step
        env:
          INFOBLOX_USERNAME: ${{ env.INFOBLOX_USERNAME }}
          INFOBLOX_PASSWORD: ${{ env.INFOBLOX_PASSWORD }}
          # Pass the outputs from the dry-run job into environment variables
          PROPOSED_SUBNET_FROM_DRYRUN: ${{ needs.dry-run.outputs.proposed_subnet }}
          NETWORK_VIEW_FROM_DRYRUN: ${{ needs.dry-run.outputs.network_view }}
        run: |
          # Use the environment variables, which is more reliable
          python infoblox_create_cidr_enhanced.py apply \
            --infoblox-url "${{ secrets.INFOBLOX_URL }}" \
            --subnet-name "${{ github.event.inputs.subnet_name }}" \
            --site-code "GCP" \
            --proposed-subnet "${PROPOSED_SUBNET_FROM_DRYRUN}" \
            --network-view "${NETWORK_VIEW_FROM_DRYRUN}"
      
      - name: Display Reservation Summary
        if: success()
        run: |
          echo "## âœ… Infoblox Reservation Successful" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "A new CIDR block has been successfully reserved with the following details:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Subnet Name (Comment):** \`${{ github.event.inputs.subnet_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **CIDR Range Reserved:** \`${{ needs.dry-run.outputs.proposed_subnet }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Network View:** \`${{ needs.dry-run.outputs.network_view }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Reserved From (Supernet):** \`${{ needs.dry-run.outputs.supernet_used }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Site Code:** \`GCP\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "You can view the new reservation in the Infoblox UI." >> $GITHUB_STEP_SUMMARY
